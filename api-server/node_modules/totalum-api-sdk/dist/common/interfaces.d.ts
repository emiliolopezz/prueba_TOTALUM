export interface StructureLevels {
    id: string;
    typeId: string;
    propertyId?: string;
    children: Array<StructureLevels>;
}
export interface FilterSearchQueryI {
    filter?: FiltersArrayI;
    sort?: ISearchQuerySort;
    pagination?: {
        limit?: number;
        page?: number;
        skip?: number;
    };
    returnCount?: boolean;
}
export interface NestedQueryFilterI {
    [tableName: string]: NestedQueryFilterItem;
}
interface NestedQueryFilterItem {
    tableFilter?: FiltersArrayI;
    propertyName?: string;
    [tableName: string]: NestedQueryFilterItem | FiltersArrayI | string | undefined;
}
export type FilterLookupSearchQueryI = {
    pagination: {
        limit?: number;
        page?: number;
        skip?: number;
    };
    filters: FilterStructureLevelsI;
};
export interface filterNestedOptionsI {
    pagination: {
        limit?: number;
        page?: number;
        skip?: number;
    };
}
export interface FilterStructureLevelsI extends StructureLevels {
    filters?: FiltersArrayI;
    children: FilterStructureLevelsI[];
}
export type FiltersArrayI = Array<ISearchQueryFilterOr | ISearchQueryFilterOptions>;
export interface ISearchQueryFilterOr {
    or: ISearchQueryFilterOptions[];
}
export interface ISearchQuerySort {
    [key: string]: 1 | -1;
}
export interface ISearchQueryFilterOptions {
    [key: string]: number | Date | boolean | string | PropertyQueryOptionsI;
}
export interface PropertyQueryOptionsI {
    regex?: number | string;
    options?: 'i' | 'm' | 'x' | 's';
    gte?: number | Date;
    lte?: number | Date;
    gt?: number | Date;
    lt?: number | Date;
    ne?: number | Date | boolean | string;
}
export type fieldValuesEnabled = null | string | number | boolean | Date | {
    name: string;
} | {
    lastUsersActions?: {
        [key: string]: any;
    };
};
export interface DataValues {
    _id: string;
    createdAt: Date;
    updatedAt: Date;
    [key: string]: fieldValuesEnabled;
}
export interface DataProperties {
    [key: string]: fieldValuesEnabled | any;
}
export interface NestedQuery {
    [tableName: string]: any;
}
export interface AuthOptions {
    token?: {
        accessToken: string;
    };
    apiKey?: {
        'api-key': string;
    };
    baseUrl?: string;
}
export interface NotificationI {
    name: string;
    title: string;
    description: string;
    visibility: {
        sendTo: 'all' | 'admins' | 'specificUsers';
        specificUsersEmails?: string[];
    };
    action: {
        actionType: 'link' | 'none';
        actionName?: string;
        link?: string;
    };
    email: {
        sendEmail: boolean;
        totalumSupportBtn?: boolean;
    };
    createdAt?: Date;
    visibleUntil?: Date;
    seen?: boolean;
}
export interface StatisticOptionsI {
    statisticType: 'quantity' | 'add';
    tableName: string;
    propertyName: string;
    idsOfMultipleNodesToSearch?: string[];
}
export {};
