"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.endpoints = void 0;
// ENDPOINTS
exports.endpoints = {
    crud: {
        getObjectById: 'api/v1/crud/:typeId/:id',
        getObjects: 'api/v1/crud/query/:typeId',
        getNestedData: 'api/v1/crud/nested',
        createObject: 'api/v1/crud/:typeId',
        editObjectProperties: 'api/v1/crud/:typeId/:id',
        deleteObject: 'api/v1/crud/:typeId/:id',
        deleteObjectAndSubElements: 'api/v1/crud/:typeId/:id/:pageId/subelements',
        updateLastUsersActions: 'api/v1/crud/:typeId/:id/lastUsersActions',
        addManyToManyReference: 'api/v1/crud/:typeId/:id/add-many-to-many-reference',
        dropManyToManyReference: 'api/v1/crud/:typeId/:id/drop-many-to-many-reference',
        getManyToManyReferencesItems: 'api/v1/crud/:typeId/:id/:propertyName', //currently only used for many to many references
    },
    updatesRecord: {
        getUpdateRecordByObjectId: 'api/v1/updates-record/:objectId',
    },
    files: {
        uploadFile: 'api/v1/files/upload',
        getDownloadUrl: 'api/v1/files/download/:fileName',
        deleteFile: 'api/v1/files/:fileName',
        ocrOfImage: 'api/v1/files/ocr/image',
        ocrOfPdf: 'api/v1/files/ocr/pdf',
        scanInvoice: 'api/v1/files/scan-invoice',
        scanDocument: 'api/v1/files/scan-document'
    },
    filter: {
        lookUpFilter: 'api/v1/filter/:idPage',
        nestedFilter: 'api/v1/filter/nested-filter',
        runCustomAggregationQuery: 'api/v1/filter/custom-mongo-aggregation-query'
    },
    pdfTemplate: {
        generatePdfByTemplate: 'api/v1/pdf-template/generatePdfByTemplate/:id'
    },
    googleIntegration: {
        getEmails: 'api/v1/google-integration/get-emails',
        sendEmail: 'api/v1/google-integration/send-email',
        getCalendarEvents: 'api/v1/google-integration/get-calendar-events',
        createCalendarEvent: 'api/v1/google-integration/create-calendar-event',
    },
    openai: {
        createCompletion: 'api/v1/openai/completion',
        createChatCompletion: 'api/v1/openai/chat-completion',
        generateImage: 'api/v1/openai/image',
    },
    notifications: {
        createNotification: 'api/v1/notifications',
    },
    statistics: {
        getStatistic: 'api/v1/statistics/get-statistic'
    },
};
