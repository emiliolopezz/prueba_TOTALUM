"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FilterService = void 0;
const axios_1 = __importDefault(require("axios"));
const endpoints_1 = require("../common/endpoints");
const utils_1 = require("../utils");
class FilterService {
    constructor(baseUrl, headers) {
        this.headers = headers;
        this.baseUrl = baseUrl;
    }
    /*public async customMongoFilter(customMongoFilter: string, rootTypeId: string, typeIdToGet: string, options?: { variables?: any, pagination?: any, sort?: any, returnCount?: boolean }) {
        const url = UtilsService.getUrl(this.baseUrl, endpoints.filter.customMongoFilter, {});
        const body = { sort: options?.sort, variables: options?.variables, customMongoFilter, pagination: options?.pagination, rootTypeId, typeIdToGet };
        const params = options?.returnCount ? { returnCount: options?.returnCount } : null;
        return axios.post(url, body, { params: params, headers: this.headers });
    }*/
    /**
     *
     * @param idPage
     * @param query
     * @param idsOfMultipleNodesToSearch
     * @param returnCount
     * @deprecated use nestedFilter instead
     */
    lookUpFilter(idPage, query, idsOfMultipleNodesToSearch, returnCount) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = utils_1.UtilsService.getUrl(this.baseUrl, endpoints_1.endpoints.filter.lookUpFilter, { idPage });
            const params = {
                query: encodeURIComponent(JSON.stringify(query)),
                idsOfMultipleNodesToSearch: encodeURIComponent(JSON.stringify(idsOfMultipleNodesToSearch)),
                returnCount: returnCount,
            };
            return axios_1.default.get(url, { params: params, headers: this.headers });
        });
    }
    /**
     *
     * @param nestedQuery the nested query to filter by
     * @param tableNameToGetResults the table that you want to get the results that match the nested query
     * @param filterOptions extra options for the filter like the pagination and sort
     * @returns
     */
    nestedFilter(nestedQuery, tableNameToGetResults, filterOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = utils_1.UtilsService.getUrl(this.baseUrl, endpoints_1.endpoints.filter.nestedFilter, {});
            const body = { nestedFilter: nestedQuery, tableNameToGetResults: tableNameToGetResults, filterOptions: filterOptions };
            return axios_1.default.post(url, body, { headers: this.headers });
        });
    }
    /**
     *
     * @param type the table name that will be at top of the mongodb aggregation
     * @param customMongoQuery the custom mongo query
     * @returns a promise with the result of the aggregation
     */
    runCustomMongoAggregationQuery(type, customMongoQuery) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = utils_1.UtilsService.getUrl(this.baseUrl, endpoints_1.endpoints.filter.runCustomAggregationQuery);
            const body = { customMongoQuery, type };
            return axios_1.default.post(url, body, { headers: this.headers });
        });
    }
}
exports.FilterService = FilterService;
