"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CrudService = void 0;
const axios_1 = __importDefault(require("axios"));
const utils_1 = require("../utils");
const endpoints_1 = require("../common/endpoints");
class CrudService {
    constructor(baseUrl, headers) {
        this.headers = headers;
        this.baseUrl = baseUrl;
    }
    /**
     * Fetches an item by its ID.
     * @param {string} itemType - The type of the item. (table name)
     * @param {string} id - The ID of the item.
     * @returns {Promise<any>} - A promise that resolves to the item data.
     */
    getItemById(itemType, id) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = utils_1.UtilsService.getUrl(this.baseUrl, endpoints_1.endpoints.crud.getObjectById, { typeId: itemType, id });
            return axios_1.default.get(url, { headers: this.headers });
        });
    }
    /**
     * Fetches the historic updates of a record by its ID.
     * @param {string} recordId - The ID of the record to fetch the historic updates.
     * @returns {Promise<any>} - A promise that resolves to the historic updates data.
     */
    getHistoricRecordUpdatesById(recordId) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = utils_1.UtilsService.getUrl(this.baseUrl, endpoints_1.endpoints.updatesRecord.getUpdateRecordByObjectId, { objectId: recordId });
            return axios_1.default.get(url, { headers: this.headers });
        });
    }
    getItems(itemType, query) {
        const url = utils_1.UtilsService.getUrl(this.baseUrl, endpoints_1.endpoints.crud.getObjects, { typeId: itemType });
        return axios_1.default.post(url, query, { headers: this.headers });
    }
    getNestedData(nestedQuery, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = utils_1.UtilsService.getUrl(this.baseUrl, endpoints_1.endpoints.crud.getNestedData);
            return axios_1.default.post(url, { nestedQuery: nestedQuery, options: options }, { headers: this.headers });
        });
    }
    deleteItemById(itemType, id) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = utils_1.UtilsService.getUrl(this.baseUrl, endpoints_1.endpoints.crud.deleteObject, { typeId: itemType, id });
            return axios_1.default.delete(url, { headers: this.headers });
        });
    }
    editItemById(itemType, id, properties) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = utils_1.UtilsService.getUrl(this.baseUrl, endpoints_1.endpoints.crud.editObjectProperties, { typeId: itemType, id });
            return axios_1.default.patch(url, properties, { headers: this.headers });
        });
    }
    createItem(itemType, item) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = utils_1.UtilsService.getUrl(this.baseUrl, endpoints_1.endpoints.crud.createObject, { typeId: itemType });
            return axios_1.default.post(url, item, { headers: this.headers });
        });
    }
    // many to many functions 
    /**
     *
     * @param typeId the type id of the item (table name)
     * @param id the id of the item that we want to add a many to many reference
     * @param propertyId the property that we want to add a many to many reference
     * @param referenceId the id of the item that we want to add as a many to many reference
     */
    addManyToManyReferenceItem(type, id, propertyName, referenceId) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = utils_1.UtilsService.getUrl(this.baseUrl, endpoints_1.endpoints.crud.addManyToManyReference, { typeId: type, id });
            return axios_1.default.patch(url, { propertyId: propertyName, referenceId }, { headers: this.headers });
        });
    }
    /**
     *
     * @param typeId the type id of the item (table name)
     * @param id the id of the item that we want to drop a many to many reference
     * @param propertyId the property that we want to drop a many to many reference
     * @param referenceId the id of the item that we want to drop as a many to many reference
     */
    dropManyToManyReferenceItem(type, id, propertyName, referenceId) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = utils_1.UtilsService.getUrl(this.baseUrl, endpoints_1.endpoints.crud.dropManyToManyReference, { typeId: type, id });
            return axios_1.default.patch(url, { propertyId: propertyName, referenceId }, { headers: this.headers });
        });
    }
    /**
     *
     * @param typeId the type id of the item (table name)
     * @param id the id of the item that we want to get many to many references
     * @param propertyName the property that we want to get many to many references
     * @param query the query to filter and sort the results
     */
    getManyToManyReferencesItems(type, id, propertyName, query) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = utils_1.UtilsService.getUrl(this.baseUrl, endpoints_1.endpoints.crud.getManyToManyReferencesItems, { typeId: type, id, propertyName });
            return axios_1.default.get(url, { params: query, headers: this.headers });
        });
    }
}
exports.CrudService = CrudService;
