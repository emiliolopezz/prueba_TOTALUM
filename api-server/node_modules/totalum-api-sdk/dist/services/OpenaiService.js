"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpenaiService = void 0;
const axios_1 = __importDefault(require("axios"));
const utils_1 = require("../utils");
const endpoints_1 = require("../common/endpoints");
class OpenaiService {
    constructor(baseUrl, headers) {
        this.headers = headers;
        this.baseUrl = baseUrl;
    }
    /**
     *
     * @param body the openai completion body, more info here: https://platform.openai.com/docs/api-reference/completions/create
     * @returns the completion provided by openai api
     * @deprecated use createChatCompletion instead
     */
    createCompletion(body) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = utils_1.UtilsService.getUrl(this.baseUrl, endpoints_1.endpoints.openai.createCompletion);
            const b = body;
            return axios_1.default.post(url, b, { headers: this.headers });
        });
    }
    /**
     *
     * @param body the openai chat completion body, more info here:  https://platform.openai.com/docs/api-reference/chat/create
     * @returns the chat completion provided by openai api
     */
    createChatCompletion(body) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = utils_1.UtilsService.getUrl(this.baseUrl, endpoints_1.endpoints.openai.createChatCompletion);
            const b = body;
            return axios_1.default.post(url, b, { headers: this.headers });
        });
    }
    /**
 *
 * @param body the openai chat completion body, more info here:  https://platform.openai.com/docs/api-reference/chat/create
 * @returns the chat completion provided by openai api
 */
    generateImage(body) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = utils_1.UtilsService.getUrl(this.baseUrl, endpoints_1.endpoints.openai.generateImage);
            const b = body;
            return axios_1.default.post(url, b, { headers: this.headers });
        });
    }
}
exports.OpenaiService = OpenaiService;
