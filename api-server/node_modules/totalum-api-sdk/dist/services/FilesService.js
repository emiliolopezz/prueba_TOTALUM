"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FilesService = void 0;
const axios_1 = __importDefault(require("axios"));
const utils_1 = require("../utils");
const endpoints_1 = require("../common/endpoints");
class FilesService {
    constructor(baseUrl, headers) {
        this.headers = headers;
        this.baseUrl = baseUrl;
    }
    /**
     *
     * @param fileFormData the form data of the file to upload
     */
    uploadFile(fileFormData, options) {
        return __awaiter(this, void 0, void 0, function* () {
            let url = utils_1.UtilsService.getUrl(this.baseUrl, endpoints_1.endpoints.files.uploadFile);
            if (options === null || options === void 0 ? void 0 : options.compressFile)
                url += '?compressFile=true';
            return axios_1.default.post(url, fileFormData, { headers: this.headers });
        });
    }
    /**
     *
     * @param fileName the name of the file to delete
     */
    deleteFile(fileName) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = utils_1.UtilsService.getUrl(this.baseUrl, endpoints_1.endpoints.files.deleteFile, { fileName });
            return axios_1.default.delete(url, { headers: this.headers });
        });
    }
    /**
     *
     * @param fileName
     * @param options options.expirationTime - is the time in milliseconds that the signed URL should be valid for. The default is 128 hours
     * @returns
     */
    getDownloadUrl(fileName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = utils_1.UtilsService.getUrl(this.baseUrl, endpoints_1.endpoints.files.getDownloadUrl, { fileName });
            return axios_1.default.get(url, { headers: this.headers, params: options });
        });
    }
    generatePdfByTemplate(id, variables, name) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = utils_1.UtilsService.getUrl(this.baseUrl, endpoints_1.endpoints.pdfTemplate.generatePdfByTemplate, { id });
            return axios_1.default.post(url, { templateId: id, variables, name }, { headers: this.headers });
        });
    }
    ocrOfImage(fileName) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = utils_1.UtilsService.getUrl(this.baseUrl, endpoints_1.endpoints.files.ocrOfImage);
            return axios_1.default.post(url, { fileName }, { headers: this.headers });
        });
    }
    ocrOfPdf(fileName) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = utils_1.UtilsService.getUrl(this.baseUrl, endpoints_1.endpoints.files.ocrOfPdf);
            return axios_1.default.post(url, { fileName }, { headers: this.headers });
        });
    }
    scanInvoice(fileName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = utils_1.UtilsService.getUrl(this.baseUrl, endpoints_1.endpoints.files.scanInvoice);
            return axios_1.default.post(url, { fileName, options }, { headers: this.headers });
        });
    }
    scanDocument(fileName, properties, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = utils_1.UtilsService.getUrl(this.baseUrl, endpoints_1.endpoints.files.scanDocument);
            return axios_1.default.post(url, { fileName, properties, options }, { headers: this.headers });
        });
    }
}
exports.FilesService = FilesService;
