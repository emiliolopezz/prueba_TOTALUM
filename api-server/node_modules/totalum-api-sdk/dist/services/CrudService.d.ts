import { FilterSearchQueryI, NestedQuery } from "../common/interfaces";
export declare class CrudService {
    private headers;
    private baseUrl;
    constructor(baseUrl: string, headers: any);
    /**
     * Fetches an item by its ID.
     * @param {string} itemType - The type of the item. (table name)
     * @param {string} id - The ID of the item.
     * @returns {Promise<any>} - A promise that resolves to the item data.
     */
    getItemById<T = any>(itemType: string, id: string): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Fetches the historic updates of a record by its ID.
     * @param {string} recordId - The ID of the record to fetch the historic updates.
     * @returns {Promise<any>} - A promise that resolves to the historic updates data.
     */
    getHistoricRecordUpdatesById(recordId: string): Promise<import("axios").AxiosResponse<any, any>>;
    getItems<T = any>(itemType: string, query?: FilterSearchQueryI): Promise<import("axios").AxiosResponse<any, any>>;
    getNestedData<T = any>(nestedQuery: NestedQuery, options?: any): Promise<import("axios").AxiosResponse<any, any>>;
    deleteItemById(itemType: string, id: string): Promise<import("axios").AxiosResponse<any, any>>;
    editItemById<T = any>(itemType: string, id: string, properties: T): Promise<import("axios").AxiosResponse<any, any>>;
    createItem<T = any>(itemType: string, item: T): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @param typeId the type id of the item (table name)
     * @param id the id of the item that we want to add a many to many reference
     * @param propertyId the property that we want to add a many to many reference
     * @param referenceId the id of the item that we want to add as a many to many reference
     */
    addManyToManyReferenceItem(type: string, id: string, propertyName: string, referenceId: string): Promise<any>;
    /**
     *
     * @param typeId the type id of the item (table name)
     * @param id the id of the item that we want to drop a many to many reference
     * @param propertyId the property that we want to drop a many to many reference
     * @param referenceId the id of the item that we want to drop as a many to many reference
     */
    dropManyToManyReferenceItem(type: string, id: string, propertyName: string, referenceId: string): Promise<any>;
    /**
     *
     * @param typeId the type id of the item (table name)
     * @param id the id of the item that we want to get many to many references
     * @param propertyName the property that we want to get many to many references
     * @param query the query to filter and sort the results
     */
    getManyToManyReferencesItems<T = any>(type: string, id: string, propertyName: string, query?: FilterSearchQueryI): Promise<any>;
}
