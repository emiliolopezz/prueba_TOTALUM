import { FilterLookupSearchQueryI, filterNestedOptionsI, NestedQueryFilterI } from "../common/interfaces";
export declare class FilterService {
    private headers;
    private baseUrl;
    constructor(baseUrl: string, headers: any);
    /**
     *
     * @param idPage
     * @param query
     * @param idsOfMultipleNodesToSearch
     * @param returnCount
     * @deprecated use nestedFilter instead
     */
    lookUpFilter(idPage: string, query: FilterLookupSearchQueryI, idsOfMultipleNodesToSearch?: string[], returnCount?: boolean): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @param nestedQuery the nested query to filter by
     * @param tableNameToGetResults the table that you want to get the results that match the nested query
     * @param filterOptions extra options for the filter like the pagination and sort
     * @returns
     */
    nestedFilter(nestedQuery: NestedQueryFilterI, tableNameToGetResults: string, filterOptions?: filterNestedOptionsI): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @param type the table name that will be at top of the mongodb aggregation
     * @param customMongoQuery the custom mongo query
     * @returns a promise with the result of the aggregation
     */
    runCustomMongoAggregationQuery(type: string, customMongoQuery: string): Promise<import("axios").AxiosResponse<any, any>>;
}
