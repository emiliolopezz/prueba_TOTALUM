export declare class FilesService {
    private headers;
    private baseUrl;
    constructor(baseUrl: string, headers: any);
    /**
     *
     * @param fileFormData the form data of the file to upload
     */
    uploadFile(fileFormData: any, options?: {
        compressFile?: boolean;
    }): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @param fileName the name of the file to delete
     */
    deleteFile(fileName: string): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @param fileName
     * @param options options.expirationTime - is the time in milliseconds that the signed URL should be valid for. The default is 128 hours
     * @returns
     */
    getDownloadUrl(fileName: string, options?: {
        expirationTime?: number;
    }): Promise<import("axios").AxiosResponse<any, any>>;
    generatePdfByTemplate(id: string, variables: {
        [variableName: string]: any;
    }, name: string): Promise<import("axios").AxiosResponse<any, any>>;
    ocrOfImage(fileName: string): Promise<import("axios").AxiosResponse<any, any>>;
    ocrOfPdf(fileName: string): Promise<import("axios").AxiosResponse<any, any>>;
    scanInvoice(fileName: string, options?: any): Promise<import("axios").AxiosResponse<any, any>>;
    scanDocument(fileName: string, properties: any, options?: any): Promise<import("axios").AxiosResponse<any, any>>;
}
