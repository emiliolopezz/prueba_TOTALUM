"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TotalumApiSdk = void 0;
const OpenaiService_1 = require("./services/OpenaiService");
const FilterService_1 = require("./services/FilterService");
const FilesService_1 = require("./services/FilesService");
const CrudService_1 = require("./services/CrudService");
const NotificationService_1 = require("./services/NotificationService");
const StatisticService_1 = require("./services/StatisticService");
__exportStar(require("./common/interfaces"), exports);
class TotalumApiSdk {
    constructor(authOptions) {
        var _a, _b;
        this._baseUrl = 'https://api.totalum.app/';
        this.authOptions = authOptions;
        if ((_a = this.authOptions.token) === null || _a === void 0 ? void 0 : _a.accessToken) {
            this._headers = {
                authorization: this.authOptions.token.accessToken
            };
        }
        else if ((_b = this.authOptions.apiKey) === null || _b === void 0 ? void 0 : _b['api-key']) {
            this._headers = {
                'api-key': this.authOptions.apiKey['api-key'],
            };
        }
        else {
            throw new Error('Error: invalid auth options');
        }
        if (this.authOptions.baseUrl) {
            this._baseUrl = this.authOptions.baseUrl;
        }
        // @ts-ignore
        if (this.authOptions.fromEvent) {
            this._headers['fromEvent'] = 'true';
        }
        this.setRequestData();
    }
    changeBaseUrl(newBaseUrl) {
        this._baseUrl = newBaseUrl;
        //update services with new implementation
        this.setRequestData();
    }
    setRequestData() {
        this.crud = new CrudService_1.CrudService(this._baseUrl, this._headers);
        this.openai = new OpenaiService_1.OpenaiService(this._baseUrl, this._headers);
        this.files = new FilesService_1.FilesService(this._baseUrl, this._headers);
        this.filter = new FilterService_1.FilterService(this._baseUrl, this._headers);
        this.notification = new NotificationService_1.NotificationService(this._baseUrl, this._headers);
        this.statistic = new StatisticService_1.StatisticService(this._baseUrl, this._headers);
    }
}
exports.TotalumApiSdk = TotalumApiSdk;
